#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 上述两行注释放在源码顶部分别用于指定 *nix 环境能够直接把源程序当做脚本来调用, 以及限定该文件编码

# 介绍: 
# 主流 Python 解释器是 CPython(用 C 开发的), 同样也有 JVM 上的 Jython 和 JIT技术的 PyPy. 学习过程中一般使用
# IPython(基于 CPython, 不过交互性更好, 可以在交互界面查看更多的信息)
# 在 Ipython 下, 使用 %lsmagic 查看所有解释器有关的 magic 命令(有点像 Linux 命令), 例如
# %whos 查看当前变量空间, %reset -f 重置变量空间. 
# 并且在函数后面加一个 '?' , 可以查看该函数的帮助, '??'查看函数源代码, '_'
# 表示上个 cell (上个执行的代码)的输出结果, '!' 开头调用系统命令

# 单行注释

# array
from numpy import *

##########################################
# 这里主要讲一些内置类型和其中的一些方法 #
##########################################

# Python 是弱类型OOP语言, 解释器会自动寻找最适合的类型, 但其实仍然是有类型的, py 的数据类型:
# 可以用 type([var]) 来获取当前该变量的类型
# 函数名和类型名都可以作为变量名, 这是极其危险的行为, 尽量避免, 但是关键字作为变量名会报错
# int = 1

# 基本类型, 都是不可变类型(Immutable), 这样能够避免赋值给其他变量之后, 原对象改变造成所有关联的引
# 用造成改变, 还有一些非基本类型也是不可变类型, 目的都是一样的
# 整数(int), 可以用 0x 前缀, 表示十六进制, 同样可用 0b, 0X, 0B, 0前缀, 没有范围限制
integerVar = 0x50ffffffffffffffffffffffffffffffffffffffffffffffffffff
# 在py2中, 整数类型有范围限制, 后缀 L 可以强制作为长整数(没有 L 但是大小很大也会变成长整数, )
# int2 = 88888L
# 浮点数(float), 可采用科学计数法, 并且有一定精度范围
# 不过有一点需要注意, 默认浮点数都是转化为精度内最靠近的二进制浮点数, 难免会误差, 最典型的例子就是
# 0.1+0.2, 可以使用 round()来近似并得到正确十进制数值, 并且print也会自动修正这个误差
floatVar = 3.141592653589793238001100110011001100110011001100110011001100110011010e-3
print('float 有精度范围:', floatVar)
# int 和 float 可以用构造方法来从字符串来构造数值类型

# 字符串(str), 用 '' 或 "" 或 '''多行字符串'''包围都行, 其中字符可用转移字符, 使用r前缀表示不转义
字符串Var = r'''string\n
多行'''
# 多行字符串还可以使用 每一行字符串之间只有空白字符 以及用 \ 来作为换行的方法
字符串Var = 'hello '
'world' \
    ", 你好"

# 布尔值(bool), py 大小写敏感
boolVar = True
# 元组(tuple), 元组可以嵌套, 可以省略小括号
tupleVar = 1, 'str', (1, 3, 4), ['demo', 2]
# 复数(complex), 其中 J 或 j 表示虚部 `!$i$`
complexVar = 1 + 2J

# 非基本类型但是是内置类型, 对这些导出类型的赋值, 都是拷贝引用, 也就是改变对象会影响所有指向该对象
# 的变量, 也就是说他们是可变的(muatble)
# 列表(list), 中括号括起来, 中括号不能省略
listVar = [1, 1.2, 'hello']
# 字典(dict)
dictVar = {'dog': 5, 'pig': 8}
# 特殊值: None(类型为NoneType), 表示空值
noneVar = None

# 这些内置类型除了可以使用字面量直接赋值之外, 也可以使用 [typename]([value]) 来赋值
listVar = list([dictVar, boolVar])

# 非内置类型
# Numpy 数组, 一种自定义类型(Object Oriented Classes)
arrayVar = array([1, 2, 3])

# py 中只有变量, 没有真正的常量, 约定完全大写的变量为常量
PI = 3.14159265359

# 基本类型操作
# 数值类型的 + - * % 和 C-family 和 Java 没啥区别, 不过整数之间的 / 返回的是浮点数, 而 //(地板除, 
# floor divide)则会将结果截尾整, 还有这些操作加上 = 号的原地(in-place)计算, 例如 var += 1, 但
# 是如果 // 有一个 Operand 是浮点数, 那么结果是浮点数(小数部分为0). 
# 浮点型也能使用 % 取余

# 布尔操作: and, or, not
# 赋值语句类似于 Java, 对于基本类型, 是直接复制值, 而对于非基本类型, 是复制引用. 
# ** 运算是幂运算, 例如 a ** b 表示数学上的 `!$a^b$`

# 创建的比较运算有 <, >, <=, >=, ==, !=, 并且 py 还支持链式比较
var = 5
var = 1 <= var < 5

# str 有很多内置函数(方法): split, replace, upper, lower, join(str_sequence) (用该str对象存储的
# 的字符串来将序列 str_sequence(必须是 iterable 的变量) 中的一个一个元素连接起来, len计算字符个数,
# 还有去除两头的空格 strip(类似于 java 的trim), 去除左边的空格 lstrip 和 去除右边的空格 rstrip 
# 这些方法. 
# 将任意变量转化为 str: str(var) 和 repr(var) 如果其中参数是数值类型不会进行二进制转十进制误差修正
# 还可以使用hex, oct, bin这些方法, 将整数类型转化为按照不同进制字符串

# 编码:
# 字符(长度为1的字符串) 和 对应编码的相互转换: ord 和 chr 方法
# str 默认编码为 unicode, 不过存储在文件中我们经常需要转化为 bytes 数组, 用 'b' 前缀可以限制字符串
# 中每个字符都是一个 byte(也就是ASCII编码)
# 同样可是使用 str中的 encode('编码类型') 方法来编码成 bytes, 使用 decode('编码类型')来从 bytes中
# 解码 
'小李'.encode('utf-8').decode('utf-8')

# 格式化字符串
# 可以使用 C 风格格式化, 不过是 '等格式化字符串' % (替换内容) 的形式
# 例如
print('%s 学 py  %d ' % ('kevin', 3))
# 还可以使用

# 查看一个变量当前所属类型中所有成员函数的方法: dir

# 输出函数 print(), 并且最后会输出一个回车
# 多参数之间的逗号输出时变为空格
print('100 + 50 =', 100 + 50)

# 输入函数 input(), 读行(包括回车), 返回一个类型(不包括回车)
print('input sth: ')
sth = input()
print('input is', sth)


# 控制语句

# py 用缩进来处理代码块, 当一条语句以 ':' 结尾, 下面的语句按照缩进作为代码块
# 虽然 py 有点格式要求, 但是仍然是格式自由的语言
# 例如
if (integerVar >= 0):
    print('integerVar >= 0')
    print('next line')
else:
    print('integerVar < 0')
